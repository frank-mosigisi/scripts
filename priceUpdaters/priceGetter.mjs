import fetch from 'node-fetch';

let consecutiveErrors = 0;
let lastPrice = 0;
// let interval = 5000;

function getCurrentUnixTimestamp() {
  // Using the Date object to get the current timestamp
  const currentTimestamp = Math.floor(new Date().getTime() / 1000);
  return currentTimestamp - 5;
}

async function getPriceFeed() {
  const time = getCurrentUnixTimestamp();
  const url = `https://hermes.pyth.network/api/get_price_feed?id=af5b9ac426ae79591fde6816bc3f043b5e06d5e442f52112f76249320df22449&publish_time=${time}&verbose=true`;

  try {
    const response = await fetch(url, {
      headers: {
        'accept': 'application/json'
      }
    });

    if (!response.ok) {
      consecutiveErrors++;
      console.error(`HTTP error! Status: ${response.status}`);
      if (consecutiveErrors >= 10) {
        console.error('Received 10 consecutive errors. Shutting down...');
        process.exit(1);
      }
      console.log('Reverting to the last known price:', lastPrice);
      return;
    }

    consecutiveErrors = 0;
    const data = await response.json();
    if (data.price.publish_time >= time) {
      const rawPrice = data.ema_price;
      console.log(rawPrice);
      lastPrice = data.ema_price.price;
      return rawPrice;
    } else {
      console.log('Data from an old timestamp');
      console.log('Timestamp from API:', data.price.publish_time);
      console.log('Timestamp generated by getCurrentUnixTimestamp:', time);
    }
  } catch (error) {
    console.error(`Error: ${error.message}`);
  }
}

// // Run getPriceFeed with the calculated interval
// setInterval(getPriceFeed, interval);

// Export the getPriceFeed function
export { getPriceFeed };

